/**
 * Copyright (C) 2016 Raymond L. Rivera <ray.l.rivera@gmail.com>
 *
 * This program is free software: you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later
 * version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program. If not, see <http://www.gnu.org/licenses/>.
 */

package ray.rage.scene;

import java.nio.*;

import ray.rage.asset.*;
import ray.rage.asset.material.*;
import ray.rage.rendersystem.*;
import ray.rage.rendersystem.Renderable.*;
import ray.rage.rendersystem.shader.*;
import ray.rage.rendersystem.states.*;
import ray.rage.scene.Entity;
import ray.rage.scene.ManualObject;
import ray.rage.scene.ManualObjectSection;
import ray.rage.scene.SceneManager;
import ray.rage.scene.SceneObject;
import ray.rage.scene.SubEntity;

/**
 * A <i>manual object</i> defines a discrete {@link SceneObject scene-object}
 * whose geometric data must be directly specified by the client.
 * <p>
 * A manual object is made of one or more {@link ManualObjectSection
 * manual-sections}, which means there's a <code>1:M</code> relationship between
 * manual objects and {@link ManualObjectSection manual-sections}. This
 * relationship is analogous to {@link Entity entities} and {@link SubEntity
 * sub-entities}.
 * <p>
 * Unlike {@link Entity entities} and {@link SubEntity sub-entities}, manual
 * objects and {@link ManualObjectSection manual-sections} must have the data
 * that defines them directly specified by the client. The data that makes up
 * this object is not provided by an {@link AssetManager asset-manager}. It must
 * either be hard-coded or algorithmically generated by the client; it must be
 * <i>manually</i> set. It's this object's responsibility to
 * {@link #notifyDispose() dispose} of its {@link ManualObjectSection
 * manual-sections}.
 * <p>
 * Even though manual objects represent discrete {@link SceneObject
 * scene-objects} in the world, they are <i>not</i> themselves {@link Renderable
 * renderable}. This is what the {@link ManualObjectSection manual-sections} are
 * for and it's this conceptual distinction that actually helps keep scene
 * <i>management</i> and scene <i>rendering</i> decoupled.
 * <p>
 * Manual objects are not meant to be created directly. Instead, you should use
 * the {@link SceneManager#createManualObject(String)} factory method.
 *
 * @author Raymond L. Rivera
 *
 * @see ManualObjectSection
 *
 */
public interface ManualObject extends SceneObject {

    /**
     * Creates a new {@link ManualObjectSection manual-object-section} and adds
     * it to <code>this</code>.
     *
     * @param name
     *            The name for the new {@link ManualObjectSection section}.
     * @return The new {@link ManualObjectSection section}.
     * @throws IllegalArgumentException
     *             If the name is empty.
     * @throws RuntimeException
     *             If a {@link ManualObjectSection section} with the same name
     *             has already been added to <code>this</code>.
     */
    ManualObjectSection createManualSection(String name);

    /**
     * Gets an {@link Iterable} for the {@link ManualObjectSection sections}
     * that <code>this</code> {@link ManualObject manual-object} is made of.
     *
     * @return An {@link Iterable} of the {@link ManualObjectSection sections}
     *         in <code>this</code> {@link ManualObject manual-object}.
     */
    Iterable<ManualObjectSection> getManualSections();

    /**
     * Gets the {@link ManualObjectSection section} by the specified name, if
     * available.
     *
     * @param name
     *            The name of the {@link ManualObjectSection section}.
     * @return The {@link ManualObjectSection} with the specified name, if it
     *         exists. Otherwise <code>null</code>.
     */
    ManualObjectSection getManualSection(String name);

    /**
     * Gets the {@link ManualObjectSection section} at the specified index, if
     * available.
     *
     * @param idx
     *            The position of the {@link ManualObjectSection section} to be
     *            retrieved.
     * @return The {@link ManualObjectSection section} at the specified index.
     * @throws IndexOutOfBoundsException
     *             If the index is not within a valid range.
     */
    ManualObjectSection getManualSection(int idx);

    /**
     * Gets the number of {@link ManualObjectSection sections} <code>this</code>
     * {@link ManualObject manual-object} has.
     *
     * @return The number of {@link ManualObjectSection sections}.
     */
    int getManualSectionCount();

    /**
     * Sets the {@link Renderable.Primitive primitive} of all the
     * {@link ManualObjectSection sections} in <code>this</code>
     * {@link ManualObject manual-object}.
     * <p>
     * This is a convenience method. For more granularity, use
     * {@link #getManualSection(String)} or {@link #getManualSection(int)} to
     * set the property individually.
     *
     * @param prim
     *            The {@link Renderable.Primitive primitive}.
     * @throws NullPointerException
     *             If the argument is <code>null</code>.
     */
    void setPrimitive(Primitive prim);

    /**
     * Sets the {@link Renderable.DataSource data-source} of all the
     * {@link ManualObjectSection sections} in <code>this</code>
     * {@link ManualObject manual-object}.
     * <p>
     * This is a convenience method. For more granularity, use
     * {@link #getManualSection(String)} or {@link #getManualSection(int)} to
     * set the property individually.
     *
     * @param ds
     *            The {@link Renderable.DataSource data-source}.
     * @throws NullPointerException
     *             If the argument is <code>null</code>.
     */
    void setDataSource(DataSource ds);

    /**
     * Sets the vertex <i>positions</i> buffer for all the
     * {@link ManualObjectSection sections} in <code>this</code>
     * {@link ManualObject manual-object}.
     * <p>
     * This is a convenience method. For more granularity, use
     * {@link #getManualSection(String)} or {@link #getManualSection(int)} to
     * set the property individually.
     *
     * @param vertices
     *            The vertex <i>positions</i> buffer.
     * @throws NullPointerException
     *             If the argument is <code>null</code>.
     * @throws IllegalArgumentException
     *             If the buffer is not direct.
     */
    void setVertexBuffer(FloatBuffer vertices);

    /**
     * Sets the vertex <i>texture coordinates</i> buffer for all the
     * {@link ManualObjectSection sections} in <code>this</code>
     * {@link ManualObject manual-object}.
     * <p>
     * This is a convenience method. For more granularity, use
     * {@link #getManualSection(String)} or {@link #getManualSection(int)} to
     * set the property individually.
     *
     * @param texCoords
     *            The vertex <i>texture coordinates</i> buffer.
     * @throws NullPointerException
     *             If the argument is <code>null</code>.
     * @throws IllegalArgumentException
     *             If the buffer is not direct.
     */
    void setTextureCoordBuffer(FloatBuffer texCoords);

    /**
     * Sets the vertex <i>normals</i> buffer for all the
     * {@link ManualObjectSection sections} in <code>this</code>
     * {@link ManualObject manual-object}.
     * <p>
     * This is a convenience method. For more granularity, use
     * {@link #getManualSection(String)} or {@link #getManualSection(int)} to
     * set the property individually.
     *
     * @param normals
     *            The vertex <i>normals</i> buffer.
     * @throws NullPointerException
     *             If the argument is <code>null</code>.
     * @throws IllegalArgumentException
     *             If the buffer is not direct.
     */
    void setNormalsBuffer(FloatBuffer normals);

    /**
     * Sets the vertex <i>indeices</i> buffer for all the
     * {@link ManualObjectSection sections} in <code>this</code>
     * {@link ManualObject manual-object}.
     * <p>
     * This is a convenience method. For more granularity, use
     * {@link #getManualSection(String)} or {@link #getManualSection(int)} to
     * set the property individually.
     *
     * @param indices
     *            The vertex <i>index</i> buffer.
     * @throws NullPointerException
     *             If the argument is <code>null</code>.
     * @throws IllegalArgumentException
     *             If the buffer is not direct.
     */
    void setIndexBuffer(IntBuffer indices);

    /**
     * Sets the {@link RenderState render-state} for all the
     * {@link ManualObjectSection sections} in <code>this</code>
     * {@link ManualObject manual-object}.
     * <p>
     * This is a convenience method. For more granularity, use
     * {@link #getManualSection(String)} or {@link #getManualSection(int)} to
     * set the property individually.
     *
     * @param rs
     *            The {@link RenderState render-state}.
     * @throws NullPointerException
     *             If the argument is <code>null</code>.
     */
    void setRenderState(RenderState rs);

    /**
     * Sets the {@link Material material} for all the {@link ManualObjectSection
     * sections} in <code>this</code> {@link ManualObject manual-object}.
     * <p>
     * This is a convenience method. For more granularity, use
     * {@link #getManualSection(String)} or {@link #getManualSection(int)} to
     * set the property individually.
     *
     * @param rs
     *            The {@link Material material}.
     * @throws NullPointerException
     *             If the argument is <code>null</code>.
     */
    void setMaterial(Material mat);

    /**
     * Sets the {@link GpuShaderProgram shader-program} of all the
     * {@link ManualObjectSection sections} in <code>this</code>
     * {@link ManualObject manual-object}.
     * <p>
     * This is a convenience method. For more granularity, use
     * {@link #getManualSection(String)} or {@link #getManualSection(int)} to
     * set the property individually.
     *
     * @param prog
     *            The {@link GpuShaderProgram shader-program}.
     * @throws NullPointerException
     *             If the argument is <code>null</code>.
     */
    void setGpuShaderProgram(GpuShaderProgram prog);

    void setDepthShaderProgram(GpuShaderProgram prog);
    
    void setCanReceiveShadows(Boolean b);
}
